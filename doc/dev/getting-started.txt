Getting started with khmer development
======================================

Start by making your own copy of khmer and setting yourself up for
development; then, build khmer and run the tests; and finally, claim
an issue and start developing!

If you're unfamiliar with git and branching in particular, check out
the `git-scm book <http://git-scm.com/book/en/Git-Branching>`__.

We've provided a quick guide to the khmer code base here:
:doc:`codebase-guide`.

One-time Preparation
--------------------

#. Get a `GitHub <http://github.com>`__ account.

   (We use GitHub to manage khmer contributions.)

#. Fork `github.com/ged-lab/khmer <http://github.com/ged-lab/khmer>`__.

   Visit that page, and then click on the 'fork' button (upper right).

   (This makes a copy of the khmer source code in your own github account.)

#. Clone your copy of khmer to your local development environment.

   Your clone URL should look something like this::

       https://github.com/empty-titus/khmer.git

   and the UNIX shell command should be::

       git clone https://github.com/empty-titus/khmer.git

   (This makes a local copy of khmer on your development machine.)

#. Add a git reference to the khmer ged-lab repository::

       git remote add ged https://github.com/ged-lab/khmer.git

   (This makes it easy for you to pull down the latest changes in the
   main repository.)

#. Create a virtual Python environment within which to work with
   `virtualenv <https://pypi.python.org/pypi/virtualenv>`__::

       python2.7 -m virtualenv env

   (This gives you a place to install packages necessary for running khmer.)

#. Activate the virtualenv and install a few packages::

       . env/bin/activate
       pip install sphinx nose

   (This installs `Sphinx <http://sphinx-doc.org/>`__ and `nose
   <https://nose.readthedocs.org/en/latest/>`__, packages we use for
   building the documentation and running the tests.)

Building khmer and running the tests
------------------------------------

#. Activate the virtualenv::

      . env/bin/activate

   You can run this many times without any ill effects.

   (This puts you in a cozy environment that you control.)

#. Build khmer::

      cd khmer
      make

   If this fails, we apologize -- please `go create a new issue
   <https://github.com/ged-lab/khmer/issues?direction=desc&sort=created&state=open>`__,
   paste in the failure message, and we'll try to help you work through it!

   (This takes the C++ source code and compiles it into something that Python
   can run.)

#. Run the tests::

      make test

   You should see lots of output, with::

      Ran 360 tests in 10.403s

      OK

   at the end.

   (This will run all of the Python tests.)

Congratulations! You're ready to develop!

Claiming an issue and starting to develop
------------------------------------------

#. Find an open issue and claim it.

   Go to `the list of open khmer issues
   <https://github.com/ged-lab/khmer/issues?direction=desc&sort=created&state=open>`__
   and find one you like; we suggest starting with `the low-hanging fruit issues <https://github.com/ged-lab/khmer/issues?direction=desc&labels=low-hanging-fruit&page=1&sort=created&state=open>`__).

   Once you've found an issue you like, add a comment "I am working on
   this issue." You've staked your claim!

   (We're trying to avoid having multiple people working on the same issue.)

#. Update your master branch from the main khmer master branch::

      git checkout master
      git pull ged master

   (This pulls in all of the latest changes from whatever we've been
   doing on ged-lab.)

#. Create a new branch and link it to your github fork::

      git checkout -b fix/issue_number
      git push -u origin fix/issue_number

   where you replace "issue_number" with the number of the issue.

   (This is the set of changes you're going to ask to be merged into khmer.)

#. Make some changes and commit them.

   This will be issue dependent ;).

   You will need to visit and revisit :doc:`coding-guidelines-and-review`.

#. Periodically update your branch from the main khmer master branch::

      git checkout master
      git pull ged master

   (This pulls in all of the latest changes from whatever we've been
   doing on ged-lab - important especially during periods of fast change
   or for long-running pull requests.

#. Run the tests and/or build the docs *before* pushing to github::

      make doc test

   Make sure they all pass!

#. Push your branch to your own github fork::

      git push origin

   (This pushes all of your changes to your own fork.)

#. Repeat until you're ready to merge your changes into "official" khmer.

#. Set up a Pull Request asking to merge things into the central khmer
   repository.

   Go to your github fork of khmer, e.g.::

      https://github.com/empty-titus/khmer

   and you will see a list of "recently pushed branches" just above the
   source code listing.  On the right side of that should be a
   "Compare & pull request" green button.  Click on it!

   You should now have a title and comment box; add a descriptive title and
   put a link to the issue in by saying something like "fixes issue #532".
   This will automagically link to the khmer issue tracker.

   Click "create pull request".  This creates a new issue where we can
   all discuss your proposed changes; the khmer team will be automatically
   notified and you will receive e-mail notifications as we add comments.

   (A "pull request", or PR, is a request to the khmer team to merge
   your changes into the khmer repository; see `GitHub flow
   <http://scottchacon.com/2011/08/31/github-flow.html>`__ for more
   info.

   Note that you can push multiple changes to a single pull request,
   and that pull requests can be progressive.)

#. The khmer team will now review your merge request and communicate
   with you through the pull request page.  Please feel free to add
   'ping!' in the comments if you are looking for feedback -- this
   will alert us that you are still on the line -- but we will automatically
   get notified of your pull request and any new comments, so use sparingly.

   If this is still your first issue, please *don't* take another issue until
   we've merged your first one - thanks!

#. If we request changes, return to the step "Make some changes and
   commit them" and go from there.  Any additional commits you make and
   push to your branch will automatically be added to the pull request
   (which is pretty dang cool.)

After your first issue is successfully merged...
------------------------------------------------

You're now a journeyman!  The main thing we would ask you to do is NOT
take any more low-hanging fruit -- you should leave those for the
novices.

But! You can now do a couple of things!

* If you're knowledgeable in C++ and/or Python and/or documentation
  and/or biology, we'd love to attract further contributions to khmer.
  Please visit the issues list and browse about and find something
  interesting looking.

* One general thing we'd like to do is increase our test coverage.
  You can go find test coverage information `on our continuous
  integration server
  <http://ci.ged.msu.edu/job/khmer-master/label=linux/cobertura>`__ by
  clicking down to individual files; or, ask us on
  khmer-project@idyll.org for suggestions.

* You can help other people out by watching for new issues or looking at
  pull requests.  Remember to be nice and polite!

* There's a whole bunch of `other projects
  <https://etherpad.mozilla.org/sciencelab-2014summersprint-sites>`__
  that you can join -- and now that you've successfully contributed to
  our github project, you're ready to contribute to theirs, too!
  (Note: they may not use the same issue tracker or pull requests, but
  the basic process should be similar - fork, clone, make changes,
  push, notify the project of the pushed changes.)
